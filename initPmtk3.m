function initPmtk3(verbose)
%% Run this script to initialize PMTK3
if nargin < 1, verbose = true; end
if verbose, disp('initializing pmtk3'); end
format compact
%%
% Change to the directory storing this function, which should be the
% root PMTK3 directory.
thisDir = fileparts(which(mfilename()));
cd(thisDir);
addpath(thisDir);
addpath(genpathPMTK(fullfile(thisDir, 'meta'))); 
%%
% Add matlab tools
mtSource = getConfigValue('PMTKlocalMatlabToolsPath');
if exist(mtSource, 'dir') % if local svn repository exists, use it
    addpath(genpathPMTK(mtSource));
else                      % otherwise make sure we don't download twice
    addpath(fullfile(thisDir, 'matlabTools')); % may be initially empty
end
if ~exist('matlabToolsRoot', 'file')
    url = 'http://matlabtools.googlecode.com/svn/trunk/matlabTools.zip';
    fprintf('downloading matlabTools...'); 
    unzip(url, fullfile(thisDir, 'matlabTools')); 
    addpath(genpathPMTK(fullfile(thisDir, 'matlabTools'))); 
    fprintf('done\n'); 
end
%%
% Add PMTK3 to the Matlab path
addpath(genpathPMTK(fullfile(thisDir, 'toolbox')));
addpath(genpathPMTK(fullfile(thisDir, 'demos')));

% The following directories are initially empty
% but may be filled with stuff on demand...
addpath(genpathPMTK(fullfile(thisDir, 'data')));
addpath(genpathPMTK(fullfile(thisDir, 'external')), '-end');
%%
% We store user specific pmtk info in a directory they are sure to have
% write access to.
pmtkInfoDir = fullfile(tempdir(), 'pmtkInfo');
if ~exist(pmtkInfoDir, 'file')
    mkdir(pmtkInfoDir);
end
providePath(pmtkInfoDir);
%%
% Store information about which toolboxes are installed
toolbox = {'stats', 'bioinfo', 'optim', 'signal', 'images', 'symbolic',...
    'nnet', 'splines'};
for t=1:numel(toolbox)
    installed = ...
        onMatlabPath(fullfile(matlabroot, 'toolbox', toolbox{t}), true);
    fname =   sprintf('%sToolboxInstalled', toolbox{t});
    text  = { sprintf('function answer = %s()', fname)
        '% autogenerated by initPmtk3()'
        sprintf('answer = %d;', installed)
        'end'
        };
    writeText(text, fullfile(pmtkInfoDir, [fname, '.m']));
end
%%
% Check if this is Octave or Matlab
matlab = isSubstring('MATLAB', matlabroot, true);
text = { 'function answer = isOctave()'
    '%autogenerated by initPmtk3()'
    sprintf('answer = %d;', ~matlab);
    'end'
    };
writeText(text, fullfile(pmtkInfoDir, 'isOctave.m'));
%%
% Add PMTK support
% If you have a local copy of pmtkSupport, add it to your path  otherwise
% download it.
source = getConfigValue('PMTKlocalSupportPath');
if exist(source, 'dir')
    addpath(genpathPMTK(source), '-end');
end
if ~(exist('pmtkSupportRoot', 'file') == 2)
    downloadAllSupport();
end
% Add graphViz directory
if matlab && ~verLessThan('matlab', '7.6.0')
    gvizDir = getConfigValue('PMTKgvizPath'); 
    if exist(gvizDir, 'dir')
       addtosystempath(gvizDir);  
    end
end
% add libdai
source = getConfigValue('PMTKlibdaiPath'); 
if exist(source, 'dir')
    addpath(genpathPMTK(source), '-end'); 
end
%%
% If running windows, add the svm executables to the system path.
if ispc() && exist('pmtkSupportRoot', 'file')
    folder = pmtkSupportRoot();
    
    dirs = {'svmLightWindows'        , ...
        'liblinear-1.51\windows' , ...
        'libsvm-mat-2.9.1'       };
    
    for i=1:length(dirs)
        addtosystempath(fullfile(folder, dirs{i}))
    end
end
%%
% Add local data directory to path if it exists
source = getConfigValue('PMTKlocalDataPath');
if exist(source, 'dir')
    addpath(genpathPMTK(source));
end
%%
if verbose, disp('welcome to pmtk3'); end
end