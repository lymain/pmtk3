= Writing Demos =

Demos in PMTK3 are automatically published to html using the [http://pmtk3.googlecode.com/svn/trunk/misc/metatools/publishDemos.m publishDemos()] function. To ensure that these demos look nice, please format the comments as follows:

== Title == 

Every demo should have a title. This will appear in two places, the list of demos by chapter, and at the top of the demo itself. 

  * The title must be a single line, and the very first line of the file, above even the    function header. 
  * The title line must begin with two % signs followed by a single space, as in {{{%% Demo Title Here}}}.
  * Additional comments that pertain to the whole demo should immediately follow the title  without any blank lines and with each line beginning with a single % sign followed by a space. 
  * This comment block, even if empty, must end with two %% signs before the first line of Matlab code. 


{{{
%% Multiclass Logistic Regression 
% In this demo, we fit a multiclass logistic regression model by first
% performing various basis expansions of the input features. This is a
% simplification of logregMultinomKernelMinfuncDemo.
%%
function logregMultinomKernelDemo()
%% Setup Data
setSeed(0);
nClasses = 5;
nInstances = 100;
nVars = 2;
[X, y] = makeData('multinomialNonlinear', nInstances, nVars, nClasses);
.
.
.
}}}


== Sections == 

Break the demo into logical sections using two %% signs. The comment text on this line
is used as the section title and appears in the demos 'table' of contents.


{{{
%% Setup Data
setSeed(0);
nClasses = 5;
nInstances = 100;
nVars = 2;
[X, y] = makeData('multinomialNonlinear', nInstances, nVars, nClasses);
%% Settings
lambda    = 1e-2;
polyOrder = 2;
rbfScale  = 1;
%% No Kernel
modelLinear = logregFit(X, y, 'lambda', lambda);
%% 
fitkern = @(k,p)logregFit(X, y, 'lambda', lambda, 'kernelFn', k, 'kernelParam', p); 
%% Polynomial
modelPoly = fitkern(@kernelPoly, polyOrder); 
%% RBF
modelRBF = fitkern(@kernelRbfSigma, rbfScale); 
.
.
.
}}}

== Figures ==

Publishing automatically embeds any generated figures into the html document. You can control where these are placed in two ways: using %% double percent signs or by using the {{{ snapnow }}} command. 

Whenever publish encounters either of these, it immediately inserts any open figures, that have not already been inserted. The double %% signs are usually sufficient, but snapnow can be useful in loops that generate many figures. Its has no effect on the code itself.

{{{
for i=1:100
  plot(....
  if ismember(i, [1, 10, 20, 100])
        snapnow;
  end
end
}}}


If you do not want the %% symbol to generate a subheading, do not include any text with it. 

== Tags == 

We generate a number of tables automatically using various 'tags' in 

== Additional Formatting Options == 

== Example == 

== Preview your Demo == 

Once you're finished writing your demo, preview what the published version will look like using the [http://pmtk3.googlecode.com/svn/trunk/misc/metatools/previewPublished.m previewPublish()] function.

{{{
previewPublish nameOfMyDemo
}}}


You can create a Matlab shortcut to preview the currently open document using this code:

{{{
EDHANDLE = com.mathworks.mlservices.MLEditorServices;
CURRENTDOC = char(EDHANDLE.builtinGetActiveDocument);
[FPATH, DOC] = fileparts(CURRENTDOC);
previewPublished(DOC); 
clear EDHANDLE CURRENTDOC FPATH DOC
}}}